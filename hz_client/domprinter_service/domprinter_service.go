// Code generated by hertz generator.

package domprinter_service

import (
	"context"
	"fmt"

	domprinter "Hertz/hertz_gen/domprinter"
	"github.com/cloudwego/hertz/pkg/common/config"
	"github.com/cloudwego/hertz/pkg/protocol"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type Client interface {
	FetchPrintTask(context context.Context, req *domprinter.FetchPrintTaskReq, reqOpt ...config.RequestOption) (resp *domprinter.FetchPrintTaskResp, rawResponse *protocol.Response, err error)

	SubmitPrintTask(context context.Context, req *domprinter.SubmitPrintTaskReq, reqOpt ...config.RequestOption) (resp *domprinter.SubmitPrintTaskResp, rawResponse *protocol.Response, err error)

	UpdatePrintTask(context context.Context, req *domprinter.UpdatePrintTaskReq, reqOpt ...config.RequestOption) (resp *domprinter.UpdatePrintTaskResp, rawResponse *protocol.Response, err error)
}

type DOMPrinterServiceClient struct {
	client *cli
}

func NewDOMPrinterServiceClient(hostUrl string, ops ...Option) (Client, error) {
	opts := getOptions(append(ops, withHostUrl(hostUrl))...)
	cli, err := newClient(opts)
	if err != nil {
		return nil, err
	}
	return &DOMPrinterServiceClient{
		client: cli,
	}, nil
}

func (s *DOMPrinterServiceClient) FetchPrintTask(context context.Context, req *domprinter.FetchPrintTaskReq, reqOpt ...config.RequestOption) (resp *domprinter.FetchPrintTaskResp, rawResponse *protocol.Response, err error) {
	fmt.Println("wocao??")
	httpResp := &domprinter.FetchPrintTaskResp{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{
			"TaskState":    req.GetTaskState(),
			"OffsetTaskID": req.GetOffsetTaskID(),
			"LimitTaskNum": req.GetLimitTaskNum(),
			"BaseReq":      req.GetBaseReq(),
		}).
		setPathParams(map[string]string{}).
		setHeaders(map[string]string{}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("GET", "/print-task")
	fmt.Println("finish-before")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	println("input", resp, rawResponse)
	return resp, rawResponse, nil
}

func (s *DOMPrinterServiceClient) SubmitPrintTask(context context.Context, req *domprinter.SubmitPrintTaskReq, reqOpt ...config.RequestOption) (resp *domprinter.SubmitPrintTaskResp, rawResponse *protocol.Response, err error) {
	httpResp := &domprinter.SubmitPrintTaskResp{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{}).
		setPathParams(map[string]string{}).
		setHeaders(map[string]string{}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("POST", "/print-task")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	return resp, rawResponse, nil
}

func (s *DOMPrinterServiceClient) UpdatePrintTask(context context.Context, req *domprinter.UpdatePrintTaskReq, reqOpt ...config.RequestOption) (resp *domprinter.UpdatePrintTaskResp, rawResponse *protocol.Response, err error) {
	httpResp := &domprinter.UpdatePrintTaskResp{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{}).
		setPathParams(map[string]string{}).
		setHeaders(map[string]string{}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("PATCH", "/print-task")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	return resp, rawResponse, nil
}

var DefaultClient, _ = NewDOMPrinterServiceClient("172.22.237.2:8881")

func ConfigDefaultClient(ops ...Option) (err error) {
	DefaultClient, err = NewDOMPrinterServiceClient("", ops...)
	return
}

func FetchPrintTask(context context.Context, req *domprinter.FetchPrintTaskReq, reqOpt ...config.RequestOption) (resp *domprinter.FetchPrintTaskResp, rawResponse *protocol.Response, err error) {
	return DefaultClient.FetchPrintTask(context, req, reqOpt...)
}

func SubmitPrintTask(context context.Context, req *domprinter.SubmitPrintTaskReq, reqOpt ...config.RequestOption) (resp *domprinter.SubmitPrintTaskResp, rawResponse *protocol.Response, err error) {
	return DefaultClient.SubmitPrintTask(context, req, reqOpt...)
}

func UpdatePrintTask(context context.Context, req *domprinter.UpdatePrintTaskReq, reqOpt ...config.RequestOption) (resp *domprinter.UpdatePrintTaskResp, rawResponse *protocol.Response, err error) {
	return DefaultClient.UpdatePrintTask(context, req, reqOpt...)
}
